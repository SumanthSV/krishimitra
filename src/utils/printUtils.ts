// Utilities for print functionality

import { getLanguage } from './languageUtils';
import { formatDate, formatCurrency } from './dateUtils';
import { logError, ErrorCategory, ErrorSeverity } from './errorUtils';

// Print styles
const PRINT_STYLES = `
  @page {
    size: A4;
    margin: 1.5cm;
  }
  
  body {
    font-family: Arial, sans-serif;
    line-height: 1.5;
    color: #000;
    background: #fff;
  }
  
  .print-header {
    text-align: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #ccc;
    padding-bottom: 10px;
  }
  
  .print-header h1 {
    font-size: 24px;
    margin: 0 0 5px 0;
  }
  
  .print-header p {
    font-size: 14px;
    margin: 0;
    color: #666;
  }
  
  .print-footer {
    text-align: center;
    margin-top: 20px;
    border-top: 1px solid #ccc;
    padding-top: 10px;
    font-size: 12px;
    color: #666;
  }
  
  .print-content {
    margin: 20px 0;
  }
  
  .print-section {
    margin-bottom: 20px;
  }
  
  .print-section h2 {
    font-size: 18px;
    margin: 0 0 10px 0;
    border-bottom: 1px solid #eee;
    padding-bottom: 5px;
  }
  
  .print-table {
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
  }
  
  .print-table th,
  .print-table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  
  .print-table th {
    background-color: #f2f2f2;
    font-weight: bold;
  }
  
  .print-table tr:nth-child(even) {
    background-color: #f9f9f9;
  }
  
  .print-info {
    display: flex;
    flex-wrap: wrap;
    margin: 15px 0;
  }
  
  .print-info-item {
    width: 50%;
    padding: 5px 0;
    box-sizing: border-box;
  }
  
  .print-info-label {
    font-weight: bold;
    margin-right: 5px;
  }
  
  .print-qr {
    text-align: center;
    margin: 20px 0;
  }
  
  .print-qr img {
    max-width: 150px;
    height: auto;
  }
  
  .print-notes {
    border: 1px solid #ddd;
    padding: 10px;
    background-color: #f9f9f9;
    font-style: italic;
  }
  
  .print-watermark {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(-45deg);
    font-size: 100px;
    color: rgba(0, 0, 0, 0.05);
    z-index: -1;
    pointer-events: none;
  }
  
  @media print {
    .no-print {
      display: none !important;
    }
  }
`;

// Translations for print labels
const printTranslations: Record<string, Record<string, string>> = {
  printedOn: {
    en: 'Printed on',
    hi: 'प्रिंट किया गया',
    pa: 'ਛਾਪਿਆ ਗਿਆ',
    bn: 'মুদ্রিত',
    te: 'ముద్రించబడింది',
    ta: 'அச்சிடப்பட்டது',
    mr: 'मुद्रित',
    gu: 'છાપ્યું',
    kn: 'ಮುದ್ರಿಸಲಾಗಿದೆ',
    ml: 'അച്ചടിച്ചത്',
  },
  page: {
    en: 'Page',
    hi: 'पेज',
    pa: 'ਪੰਨਾ',
    bn: 'পৃষ্ঠা',
    te: 'పేజీ',
    ta: 'பக்கம்',
    mr: 'पृष्ठ',
    gu: 'પાનું',
    kn: 'ಪುಟ',
    ml: 'പേജ്',
  },
  of: {
    en: 'of',
    hi: 'का',
    pa: 'ਦਾ',
    bn: 'এর',
    te: 'యొక్క',
    ta: 'இன்',
    mr: 'पैकी',
    gu: 'ના',
    kn: 'ರ',
    ml: 'ന്റെ',
  },
  generatedBy: {
    en: 'Generated by KrishiMitra App',
    hi: 'कृषिमित्र ऐप द्वारा जनरेट किया गया',
    pa: 'ਕ੍ਰਿਸ਼ੀਮਿਤਰ ਐਪ ਦੁਆਰਾ ਤਿਆਰ ਕੀਤਾ ਗਿਆ',
    bn: 'কৃষিমিত্র অ্যাপ দ্বারা তৈরি',
    te: 'కృషిమిత్ర యాప్ ద్వారా రూపొందించబడింది',
    ta: 'கிருஷிமித்ரா ஆப் மூலம் உருவாக்கப்பட்டது',
    mr: 'कृषिमित्र अॅप द्वारे तयार केले',
    gu: 'કૃષિમિત્ર એપ દ્વારા બનાવવામાં આવ્યું',
    kn: 'ಕೃಷಿಮಿತ್ರ ಅಪ್ಲಿಕೇಶನ್ ಮೂಲಕ ರಚಿಸಲಾಗಿದೆ',
    ml: 'കൃഷിമിത്ര ആപ്പ് വഴി സൃഷ്ടിച്ചത്',
  },
  confidential: {
    en: 'CONFIDENTIAL',
    hi: 'गोपनीय',
    pa: 'ਗੁਪਤ',
    bn: 'গোপনীয়',
    te: 'రహస్య',
    ta: 'இரகசியம்',
    mr: 'गोपनीय',
    gu: 'ખાનગી',
    kn: 'ಗೌಪ್ಯ',
    ml: 'രഹസ്യം',
  },
};

/**
 * Get a translated print label
 * @param key The translation key
 * @returns The translated label
 */
export const getPrintLabel = (key: string): string => {
  const language = getLanguage();
  return printTranslations[key]?.[language] || printTranslations[key]?.['en'] || key;
};

/**
 * Create a print window
 * @param title The title of the print document
 * @returns The print window document
 */
export const createPrintWindow = (title: string): Document => {
  const printWindow = window.open('', '_blank');
  
  if (!printWindow) {
    throw new Error('Failed to open print window. Please check your popup blocker settings.');
  }
  
  const document = printWindow.document;
  
  // Set up the document
  document.open();
  document.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>${title}</title>
      <style>${PRINT_STYLES}</style>
    </head>
    <body>
      <div class="print-content" id="print-content"></div>
    </body>
    </html>
  `);
  document.close();
  
  return document;
};

/**
 * Add a header to the print document
 * @param document The print document
 * @param title The title for the header
 * @param subtitle Optional subtitle
 */
export const addPrintHeader = (
  document: Document,
  title: string,
  subtitle?: string
): void => {
  const printContent = document.getElementById('print-content');
  
  if (!printContent) {
    return;
  }
  
  const header = document.createElement('div');
  header.className = 'print-header';
  
  const titleElement = document.createElement('h1');
  titleElement.textContent = title;
  header.appendChild(titleElement);
  
  if (subtitle) {
    const subtitleElement = document.createElement('p');
    subtitleElement.textContent = subtitle;
    header.appendChild(subtitleElement);
  }
  
  const dateElement = document.createElement('p');
  dateElement.textContent = `${getPrintLabel('printedOn')}: ${formatDate(new Date())}`;
  header.appendChild(dateElement);
  
  printContent.appendChild(header);
};

/**
 * Add a footer to the print document
 * @param document The print document
 * @param includePageNumbers Whether to include page numbers
 * @param additionalText Optional additional text for the footer
 */
export const addPrintFooter = (
  document: Document,
  includePageNumbers: boolean = true,
  additionalText?: string
): void => {
  const printContent = document.getElementById('print-content');
  
  if (!printContent) {
    return;
  }
  
  const footer = document.createElement('div');
  footer.className = 'print-footer';
  
  if (includePageNumbers) {
    const pageNumbers = document.createElement('div');
    pageNumbers.innerHTML = `
      <span class="page-number">${getPrintLabel('page')} 
      <span class="page-number-current"></span> ${getPrintLabel('of')} 
      <span class="page-number-total"></span></span>
    `;
    footer.appendChild(pageNumbers);
    
    // Add script to handle page numbers during printing
    const script = document.createElement('script');
    script.textContent = `
      (function() {
        window.onbeforeprint = function() {
          const style = document.createElement('style');
          style.innerHTML = '@page { counter-increment: page; @bottom-center { content: "Page " counter(page) " of " counter(pages); } }';
          document.head.appendChild(style);
        };
      })();
    `;
    document.body.appendChild(script);
  }
  
  const generatedBy = document.createElement('div');
  generatedBy.textContent = getPrintLabel('generatedBy');
  footer.appendChild(generatedBy);
  
  if (additionalText) {
    const additional = document.createElement('div');
    additional.textContent = additionalText;
    footer.appendChild(additional);
  }
  
  printContent.appendChild(footer);
};

/**
 * Add a section to the print document
 * @param document The print document
 * @param title The section title
 * @returns The created section element
 */
export const addPrintSection = (
  document: Document,
  title: string
): HTMLElement => {
  const printContent = document.getElementById('print-content');
  
  if (!printContent) {
    throw new Error('Print content element not found');
  }
  
  const section = document.createElement('div');
  section.className = 'print-section';
  
  const sectionTitle = document.createElement('h2');
  sectionTitle.textContent = title;
  section.appendChild(sectionTitle);
  
  printContent.appendChild(section);
  
  return section;
};

/**
 * Add a table to the print document
 * @param document The print document
 * @param headers The table headers
 * @param data The table data
 * @param parent The parent element to append the table to
 * @returns The created table element
 */
export const addPrintTable = (
  document: Document,
  headers: string[],
  data: any[][],
  parent: HTMLElement
): HTMLTableElement => {
  const table = document.createElement('table');
  table.className = 'print-table';
  
  // Add headers
  const thead = document.createElement('thead');
  const headerRow = document.createElement('tr');
  
  headers.forEach(header => {
    const th = document.createElement('th');
    th.textContent = header;
    headerRow.appendChild(th);
  });
  
  thead.appendChild(headerRow);
  table.appendChild(thead);
  
  // Add data
  const tbody = document.createElement('tbody');
  
  data.forEach(row => {
    const tr = document.createElement('tr');
    
    row.forEach(cell => {
      const td = document.createElement('td');
      td.textContent = cell !== null && cell !== undefined ? cell.toString() : '';
      tr.appendChild(td);
    });
    
    tbody.appendChild(tr);
  });
  
  table.appendChild(tbody);
  parent.appendChild(table);
  
  return table;
};

/**
 * Add information items to the print document
 * @param document The print document
 * @param items The information items as label-value pairs
 * @param parent The parent element to append the info to
 * @returns The created info element
 */
export const addPrintInfo = (
  document: Document,
  items: Array<{ label: string; value: string }>,
  parent: HTMLElement
): HTMLElement => {
  const infoContainer = document.createElement('div');
  infoContainer.className = 'print-info';
  
  items.forEach(item => {
    const infoItem = document.createElement('div');
    infoItem.className = 'print-info-item';
    
    const label = document.createElement('span');
    label.className = 'print-info-label';
    label.textContent = `${item.label}: `;
    infoItem.appendChild(label);
    
    const value = document.createElement('span');
    value.textContent = item.value;
    infoItem.appendChild(value);
    
    infoContainer.appendChild(infoItem);
  });
  
  parent.appendChild(infoContainer);
  
  return infoContainer;
};

/**
 * Add a QR code to the print document
 * @param document The print document
 * @param data The data to encode in the QR code
 * @param parent The parent element to append the QR code to
 */
export const addPrintQRCode = (
  document: Document,
  data: string,
  parent: HTMLElement
): void => {
  // Create a container for the QR code
  const qrContainer = document.createElement('div');
  qrContainer.className = 'print-qr';
  
  // We'll use a placeholder image for now
  // In a real implementation, you would generate a QR code using a library
  const qrImage = document.createElement('img');
  qrImage.src = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(data)}`;
  qrImage.alt = 'QR Code';
  
  qrContainer.appendChild(qrImage);
  parent.appendChild(qrContainer);
};

/**
 * Add notes to the print document
 * @param document The print document
 * @param notes The notes text
 * @param parent The parent element to append the notes to
 */
export const addPrintNotes = (
  document: Document,
  notes: string,
  parent: HTMLElement
): void => {
  const notesContainer = document.createElement('div');
  notesContainer.className = 'print-notes';
  notesContainer.textContent = notes;
  
  parent.appendChild(notesContainer);
};

/**
 * Add a watermark to the print document
 * @param document The print document
 * @param text The watermark text
 */
export const addPrintWatermark = (
  document: Document,
  text: string = getPrintLabel('confidential')
): void => {
  const watermark = document.createElement('div');
  watermark.className = 'print-watermark';
  watermark.textContent = text;
  
  document.body.appendChild(watermark);
};

/**
 * Print weather data
 * @param weatherData The weather data to print
 */
export const printWeatherData = (weatherData: any): void => {
  try {
    const document = createPrintWindow('Weather Report');
    
    // Add header
    addPrintHeader(document, 'Weather Report', weatherData.location?.name);
    
    // Current weather section
    const currentSection = addPrintSection(document, 'Current Weather');
    
    // Add current weather info
    const currentInfo = [
      { label: 'Temperature', value: `${weatherData.current?.temp}°C` },
      { label: 'Feels Like', value: `${weatherData.current?.feels_like}°C` },
      { label: 'Humidity', value: `${weatherData.current?.humidity}%` },
      { label: 'Wind Speed', value: `${weatherData.current?.wind_speed} km/h` },
      { label: 'Pressure', value: `${weatherData.current?.pressure} hPa` },
      { label: 'Visibility', value: `${weatherData.current?.visibility / 1000} km` },
      { label: 'Weather', value: weatherData.current?.weather?.[0]?.description || '' },
    ];
    
    addPrintInfo(document, currentInfo, currentSection);
    
    // Forecast section
    const forecastSection = addPrintSection(document, '7-Day Forecast');
    
    // Add forecast table
    if (weatherData.daily && weatherData.daily.length > 0) {
      const headers = ['Date', 'Min Temp', 'Max Temp', 'Weather', 'Precipitation', 'Wind Speed'];
      
      const data = weatherData.daily.map((day: any) => [
        formatDate(new Date(day.dt * 1000)),
        `${day.temp.min}°C`,
        `${day.temp.max}°C`,
        day.weather?.[0]?.description || '',
        `${Math.round(day.pop * 100)}%`,
        `${day.wind_speed} km/h`,
      ]);
      
      addPrintTable(document, headers, data, forecastSection);
    }
    
    // Agricultural advisory section
    if (weatherData.advisories && weatherData.advisories.length > 0) {
      const advisorySection = addPrintSection(document, 'Agricultural Advisories');
      
      const headers = ['Advisory', 'Crops Affected', 'Severity', 'Recommendation'];
      
      const data = weatherData.advisories.map((advisory: any) => [
        advisory.title,
        advisory.crops.join(', '),
        advisory.severity,
        advisory.recommendation,
      ]);
      
      addPrintTable(document, headers, data, advisorySection);
    }
    
    // Add notes
    const notesSection = addPrintSection(document, 'Notes');
    addPrintNotes(
      document,
      'This weather report is based on forecast data and should be used as a general guide. ' +
      'Weather conditions may change rapidly. Please check for updates regularly.',
      notesSection
    );
    
    // Add footer
    addPrintFooter(document, true);
    
    // Print the document
    setTimeout(() => {
      document.defaultView?.print();
    }, 1000);
  } catch (error) {
    logError({
      message: 'Failed to print weather data',
      error: error as Error,
      category: ErrorCategory.UI,
      severity: ErrorSeverity.WARNING,
    });
  }
};

/**
 * Print crop information
 * @param cropData The crop data to print
 */
export const printCropInfo = (cropData: any): void => {
  try {
    const document = createPrintWindow(`Crop Information: ${cropData.name}`);
    
    // Add header
    addPrintHeader(document, `Crop Information: ${cropData.name}`, cropData.scientificName);
    
    // Basic information section
    const basicSection = addPrintSection(document, 'Basic Information');
    
    // Add basic info
    const basicInfo = [
      { label: 'Name', value: cropData.name },
      { label: 'Scientific Name', value: cropData.scientificName },
      { label: 'Cultivation Period', value: cropData.cultivationPeriod },
      { label: 'Yield Potential', value: cropData.yield },
      { label: 'Last Updated', value: formatDate(new Date(cropData.lastUpdated)) },
    ];
    
    addPrintInfo(document, basicInfo, basicSection);
    
    // Requirements section
    const reqSection = addPrintSection(document, 'Growing Requirements');
    
    const reqInfo = [
      { label: 'Soil Type', value: cropData.soilRequirements },
      { label: 'Water Requirements', value: cropData.waterRequirements },
      { label: 'Temperature', value: cropData.temperatureRequirements },
      { label: 'Fertilizers', value: cropData.fertilizers },
    ];
    
    addPrintInfo(document, reqInfo, reqSection);
    
    // Cultivation practices section
    const practicesSection = addPrintSection(document, 'Cultivation Practices');
    addPrintNotes(document, cropData.cultivationPractices, practicesSection);
    
    // Pests and diseases section
    if (cropData.pestsAndDiseases) {
      const pestsSection = addPrintSection(document, 'Pests and Diseases');
      
      const headers = ['Name', 'Type', 'Symptoms', 'Control Measures'];
      
      const data = Object.entries(cropData.pestsAndDiseases).map(([name, info]: [string, any]) => [
        name,
        info.type,
        info.symptoms,
        info.controlMeasures,
      ]);
      
      addPrintTable(document, headers, data, pestsSection);
    }
    
    // Market information section
    if (cropData.marketInfo) {
      const marketSection = addPrintSection(document, 'Market Information');
      
      const marketInfo = [
        { label: 'Current Price Range', value: formatCurrency(cropData.marketInfo.priceRange) },
        { label: 'Major Markets', value: cropData.marketInfo.majorMarkets.join(', ') },
        { label: 'Demand Trend', value: cropData.marketInfo.demandTrend },
      ];
      
      addPrintInfo(document, marketInfo, marketSection);
    }
    
    // Government schemes section
    if (cropData.governmentSchemes && cropData.governmentSchemes.length > 0) {
      const schemesSection = addPrintSection(document, 'Government Schemes');
      
      const headers = ['Scheme Name', 'Benefits', 'Eligibility'];
      
      const data = cropData.governmentSchemes.map((scheme: any) => [
        scheme.name,
        scheme.benefits,
        scheme.eligibility,
      ]);
      
      addPrintTable(document, headers, data, schemesSection);
    }
    
    // Add QR code with crop ID for easy access
    const qrSection = addPrintSection(document, 'Scan for Digital Version');
    addPrintQRCode(document, `krishimitra://crop/${cropData.id}`, qrSection);
    
    // Add footer
    addPrintFooter(document, true);
    
    // Print the document
    setTimeout(() => {
      document.defaultView?.print();
    }, 1000);
  } catch (error) {
    logError({
      message: 'Failed to print crop information',
      error: error as Error,
      category: ErrorCategory.UI,
      severity: ErrorSeverity.WARNING,
    });
  }
};

/**
 * Print loan information
 * @param loanData The loan data to print
 */
export const printLoanInfo = (loanData: any): void => {
  try {
    const document = createPrintWindow(`Loan Information: ${loanData.name}`);
    
    // Add header
    addPrintHeader(document, `Loan Information: ${loanData.name}`, loanData.provider);
    
    // Basic information section
    const basicSection = addPrintSection(document, 'Basic Information');
    
    // Add basic info
    const basicInfo = [
      { label: 'Name', value: loanData.name },
      { label: 'Provider', value: loanData.provider },
      { label: 'Type', value: loanData.type },
      { label: 'Interest Rate', value: `${loanData.interestRate}%` },
      { label: 'Loan Term', value: loanData.loanTerm },
      { label: 'Maximum Amount', value: formatCurrency(loanData.maxAmount) },
    ];
    
    addPrintInfo(document, basicInfo, basicSection);
    
    // Eligibility section
    const eligibilitySection = addPrintSection(document, 'Eligibility Criteria');
    addPrintNotes(document, loanData.eligibility, eligibilitySection);
    
    // Required documents section
    if (loanData.requiredDocuments && loanData.requiredDocuments.length > 0) {
      const docsSection = addPrintSection(document, 'Required Documents');
      
      const docsList = document.createElement('ul');
      loanData.requiredDocuments.forEach((doc: string) => {
        const item = document.createElement('li');
        item.textContent = doc;
        docsList.appendChild(item);
      });
      
      docsSection.appendChild(docsList);
    }
    
    // Benefits section
    const benefitsSection = addPrintSection(document, 'Benefits');
    addPrintNotes(document, loanData.benefits, benefitsSection);
    
    // Application process section
    const processSection = addPrintSection(document, 'Application Process');
    addPrintNotes(document, loanData.applicationProcess, processSection);
    
    // Contact information section
    if (loanData.contactInfo) {
      const contactSection = addPrintSection(document, 'Contact Information');
      
      const contactInfo = [
        { label: 'Phone', value: loanData.contactInfo.phone },
        { label: 'Email', value: loanData.contactInfo.email },
        { label: 'Website', value: loanData.contactInfo.website },
        { label: 'Address', value: loanData.contactInfo.address },
      ];
      
      addPrintInfo(document, contactInfo, contactSection);
    }
    
    // Add QR code with loan ID for easy access
    const qrSection = addPrintSection(document, 'Scan for Digital Version');
    addPrintQRCode(document, `krishimitra://finance/loan/${loanData.id}`, qrSection);
    
    // Add footer
    addPrintFooter(document, true);
    
    // Print the document
    setTimeout(() => {
      document.defaultView?.print();
    }, 1000);
  } catch (error) {
    logError({
      message: 'Failed to print loan information',
      error: error as Error,
      category: ErrorCategory.UI,
      severity: ErrorSeverity.WARNING,
    });
  }
};

/**
 * Print loan calculation results
 * @param calculationData The loan calculation data to print
 */
export const printLoanCalculation = (calculationData: any): void => {
  try {
    const document = createPrintWindow('Loan Calculation Results');
    
    // Add header
    addPrintHeader(document, 'Loan Calculation Results');
    
    // Input parameters section
    const inputSection = addPrintSection(document, 'Input Parameters');
    
    // Add input info
    const inputInfo = [
      { label: 'Loan Amount', value: formatCurrency(calculationData.loanAmount) },
      { label: 'Interest Rate', value: `${calculationData.interestRate}%` },
      { label: 'Loan Term', value: `${calculationData.loanTerm} ${calculationData.loanTerm === 1 ? 'year' : 'years'}` },
    ];
    
    addPrintInfo(document, inputInfo, inputSection);
    
    // Results section
    const resultsSection = addPrintSection(document, 'Calculation Results');
    
    // Add results info
    const resultsInfo = [
      { label: 'Monthly Payment', value: formatCurrency(calculationData.monthlyPayment) },
      { label: 'Total Payment', value: formatCurrency(calculationData.totalPayment) },
      { label: 'Total Interest', value: formatCurrency(calculationData.totalInterest) },
    ];
    
    addPrintInfo(document, resultsInfo, resultsSection);
    
    // Amortization schedule section
    if (calculationData.amortizationSchedule && calculationData.amortizationSchedule.length > 0) {
      const scheduleSection = addPrintSection(document, 'Amortization Schedule');
      
      const headers = ['Payment #', 'Payment Date', 'Payment Amount', 'Principal', 'Interest', 'Remaining Balance'];
      
      const data = calculationData.amortizationSchedule.map((payment: any, index: number) => [
        index + 1,
        formatDate(new Date(payment.date)),
        formatCurrency(payment.paymentAmount),
        formatCurrency(payment.principal),
        formatCurrency(payment.interest),
        formatCurrency(payment.remainingBalance),
      ]);
      
      addPrintTable(document, headers, data, scheduleSection);
    }
    
    // Add notes
    const notesSection = addPrintSection(document, 'Notes');
    addPrintNotes(
      document,
      'This calculation is for informational purposes only and does not constitute a loan offer. ' +
      'Actual loan terms may vary based on lender policies, credit history, and other factors.',
      notesSection
    );
    
    // Add footer
    addPrintFooter(document, true);
    
    // Print the document
    setTimeout(() => {
      document.defaultView?.print();
    }, 1000);
  } catch (error) {
    logError({
      message: 'Failed to print loan calculation',
      error: error as Error,
      category: ErrorCategory.UI,
      severity: ErrorSeverity.WARNING,
    });
  }
};

/**
 * Print a generic data table
 * @param title The title of the print document
 * @param subtitle Optional subtitle
 * @param headers The table headers
 * @param data The table data
 * @param notes Optional notes to include
 */
export const printDataTable = (
  title: string,
  subtitle: string | undefined,
  headers: string[],
  data: any[][],
  notes?: string
): void => {
  try {
    const document = createPrintWindow(title);
    
    // Add header
    addPrintHeader(document, title, subtitle);
    
    // Data table section
    const tableSection = addPrintSection(document, 'Data');
    addPrintTable(document, headers, data, tableSection);
    
    // Add notes if provided
    if (notes) {
      const notesSection = addPrintSection(document, 'Notes');
      addPrintNotes(document, notes, notesSection);
    }
    
    // Add footer
    addPrintFooter(document, true);
    
    // Print the document
    setTimeout(() => {
      document.defaultView?.print();
    }, 1000);
  } catch (error) {
    logError({
      message: 'Failed to print data table',
      error: error as Error,
      category: ErrorCategory.UI,
      severity: ErrorSeverity.WARNING,
    });
  }
};